var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var DotvvmMinutes;
(function (DotvvmMinutes) {
    var SimpleShop;
    (function (SimpleShop) {
        var Api;
        (function (Api) {
            var ClientBase = /** @class */ (function () {
                function ClientBase() {
                }
                ClientBase.prototype.transformOptions = function (options) {
                    options.credentials = "same-origin";
                    return Promise.resolve(options);
                };
                return ClientBase;
            }());
            /* tslint:disable */
            //----------------------
            // <auto-generated>
            //     Generated using the NSwag toolchain v11.12.13.0 (NJsonSchema v9.10.14.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
            // </auto-generated>
            //----------------------
            // ReSharper disable InconsistentNaming
            var Client = /** @class */ (function (_super) {
                __extends(Client, _super);
                function Client(baseUrl, http) {
                    var _this = _super.call(this) || this;
                    _this.jsonParseReviver = undefined;
                    _this.http = http ? http : window;
                    _this.baseUrl = baseUrl ? baseUrl : "https://dotvvmminutesdemo.azurewebsites.net/api";
                    return _this;
                }
                /**
                 * Gets average rating for a specified product.
                 * @productId ID of the product
                 * @return Success
                 */
                Client.prototype.getRatingForProduct = function (productId) {
                    var _this = this;
                    var url_ = this.baseUrl + "/rating/{productId}";
                    if (productId === undefined || productId === null)
                        throw new Error("The parameter 'productId' must be defined.");
                    url_ = url_.replace("{productId}", encodeURIComponent("" + productId));
                    url_ = url_.replace(/[?&]$/, "");
                    var options_ = {
                        method: "GET",
                        headers: new Headers({
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        })
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http.fetch(url_, transformedOptions_);
                    }).then(function (_response) {
                        return _this.processGetRatingForProduct(_response);
                    });
                };
                Client.prototype.processGetRatingForProduct = function (response) {
                    var _this = this;
                    var status = response.status;
                    var _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach(function (v, k) { return _headers[k] = v; });
                    }
                    ;
                    if (status === 200) {
                        return response.text().then(function (_responseText) {
                            var result200 = null;
                            var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                            result200 = resultData200 !== undefined ? resultData200 : null;
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then(function (_responseText) {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                };
                /**
                 * Posts a new rating for a specified product.
                 * @productId ID of the product
                 * @ratingValue Rating value (1..5)
                 * @return Success
                 */
                Client.prototype.rateProduct = function (productId, ratingValue) {
                    var _this = this;
                    var url_ = this.baseUrl + "/rating/{productId}";
                    if (productId === undefined || productId === null)
                        throw new Error("The parameter 'productId' must be defined.");
                    url_ = url_.replace("{productId}", encodeURIComponent("" + productId));
                    url_ = url_.replace(/[?&]$/, "");
                    var content_ = JSON.stringify(ratingValue);
                    var options_ = {
                        body: content_,
                        method: "POST",
                        headers: new Headers({
                            "Content-Type": "application/json"
                        })
                    };
                    return this.transformOptions(options_).then(function (transformedOptions_) {
                        return _this.http.fetch(url_, transformedOptions_);
                    }).then(function (_response) {
                        return _this.processRateProduct(_response);
                    });
                };
                Client.prototype.processRateProduct = function (response) {
                    var status = response.status;
                    var _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach(function (v, k) { return _headers[k] = v; });
                    }
                    ;
                    if (status === 200) {
                        return response.text().then(function (_responseText) {
                            return;
                        });
                    }
                    else if (status === 400) {
                        return response.text().then(function (_responseText) {
                            return throwException("A server error occurred.", status, _responseText, _headers);
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then(function (_responseText) {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                };
                return Client;
            }(ClientBase));
            Api.Client = Client;
            var SwaggerException = /** @class */ (function (_super) {
                __extends(SwaggerException, _super);
                function SwaggerException(message, status, response, headers, result) {
                    var _this = _super.call(this) || this;
                    _this.isSwaggerException = true;
                    _this.message = message;
                    _this.status = status;
                    _this.response = response;
                    _this.headers = headers;
                    _this.result = result;
                    return _this;
                }
                SwaggerException.isSwaggerException = function (obj) {
                    return obj.isSwaggerException === true;
                };
                return SwaggerException;
            }(Error));
            Api.SwaggerException = SwaggerException;
            function throwException(message, status, response, headers, result) {
                if (result !== null && result !== undefined)
                    throw result;
                else
                    throw new SwaggerException(message, status, response, headers, null);
            }
        })(Api = SimpleShop.Api || (SimpleShop.Api = {}));
    })(SimpleShop = DotvvmMinutes.SimpleShop || (DotvvmMinutes.SimpleShop = {}));
})(DotvvmMinutes || (DotvvmMinutes = {}));
